"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const plugin_1 = __importDefault(require("tailwindcss/plugin"));
const optionsUtils_1 = require("./utils/optionsUtils");
const themeUtils_1 = require("./utils/themeUtils");
const defaultOptions = {
    defaultTheme: { extend: {} },
    themes: []
};
// I copied the way tailwind does dark themeing internally, but modified it to handle any theme name
// It is on the developer to make sure the theme name doesn't conflict with any other variants
/**
 * @param themes the themes to add as variants
 * @param helpers the tailwind plugin helpers
 */
const addThemeVariants = (themes, { addVariant, e }) => {
    for (const { name, selectors: _selectors, mediaQuery } of themes) {
        const variantName = name === optionsUtils_1.defaultThemeName ? 'defaultTheme' : name;
        const shouldAddNameBasedVariant = !_selectors && !mediaQuery;
        const selectors = _selectors !== null && _selectors !== void 0 ? _selectors : (shouldAddNameBasedVariant ? [`.${e(variantName)}`] : []);
        if (selectors.length > 0) {
            addVariant(variantName, selectors.map(x => `${x} &`));
        }
        if (mediaQuery) {
            addVariant(variantName, mediaQuery);
        }
    }
};
/**
 * @param themes the themes to add as variants
 * @param api the tailwind plugin helpers
 */
const addThemeStyles = (themes, api) => {
    const { addBase, e } = api;
    for (const { name, selectors: _selectors, extend, mediaQuery } of themes) {
        const selectors = _selectors !== null && _selectors !== void 0 ? _selectors : (name === optionsUtils_1.defaultThemeName ? [':root'] : [`.${e(name)}`]);
        if (selectors.length > 0) {
            addBase({
                [selectors.join(', ')]: (0, themeUtils_1.resolveThemeExtensionAsCustomProps)(extend, api)
            });
        }
        if (mediaQuery) {
            addBase({
                [mediaQuery]: {
                    ':root': (0, themeUtils_1.resolveThemeExtensionAsCustomProps)(extend, api)
                }
            });
        }
    }
};
const multiThemePlugin = plugin_1.default.withOptions((options = defaultOptions) => api => {
    const themes = (0, optionsUtils_1.getThemesFromOptions)(options);
    addThemeVariants(themes, api);
    addThemeStyles(themes, api);
}, (options = defaultOptions) => ({
    theme: {
        extend: (0, themeUtils_1.resolveThemeExtensionsAsTailwindExtension)((0, optionsUtils_1.getThemesFromOptions)(options))
    }
}));
module.exports = multiThemePlugin;
